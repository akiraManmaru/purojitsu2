この問題は実習時間内の正解が必須です．

==== 問題3. State パターンを使わない状態遷移の実現（状態や条件の追加） ====

問題1では State パターンを利用せずに状態遷移モデルを実現した．これだけをみると，これで良いのではないかと思うかも知れない．
しかし，様々な仕様追加・変更の必要性が生じたとき，このままの設計にこだわると大変厄介なことになる．
それを実体験してもらうのがこの問題の目的である．

=== 0. 準備 ===

問題3では，問題1で作成したクラスに変更を加えて行くので，
パッケージ lesson12.exam1 にあるテストドライブ以外のすべてのクラス・インタフェースを，パッケージ lesson12.exam3 にコピーせよ．

コピーを行う際に，ドラッグ＆ドロップを行うと余計なものを import するようになってしまい，意図しない動作をすることがある．
eclipse のパッケージエクスプローラーで，lesson12.exam1 パッケージにある必要なファイルを選択して「編集」→「コピー」し，
lesson12.exam3 パッケージで「編集」→「貼り付け」を行うこと．

本来は同じ名前で複数の実装のものが混在することは混乱のもとなので避けるべきであるが，
同じクラスに追加実装していったものと，元のものを見比べて欲しいためにこのような構成にしている．

コピーしたあと，DeliveryRobot1 クラスを DeliveryRobot3 クラスに名前変更したあと，次の作業に移ること．

=== 1. 状態と条件の追加 ===

問題1で取り扱った配送ロボットの機能を以下のように拡張することになった．

  * 問題1の状態では荷崩れが起きたら緊急停止していたが，自動で積み直しできるようになったのでそのまま配送を続けることにした．
  * より速く配送するオプションを追加して，要請があった場合には迅速に配送を行うようにした（「迅速配送中」状態とする）．
  * 緊急車両を検知する機能を追加して，緊急車両が近くを通る場合には緊急停止するようにした．

これによって修正した状態遷移は同梱した状態遷移図（StateTransition2.png）に記している．
状態遷移図を参照する際の注意事項は問題1と同様である．
（一度「迅速配送中」状態になると通常の「配送中」状態に戻らない，などツッコミどころはあるが，過度に複雑にならないようにしているので理解されたい）

=== 2. ソースコードの変更 ===

ここで，クラスの構成は問題1と同じとし，一つのクラスですべてを処理するとする．
実装するクラスやメソッドなどは配布している Javadoc を参照すること．ディレクトリ doc にある．
Javadoc は仕様通りに実装したソードコードから作成したものであるので，
Javadoc と状態遷移図を参照しながら仕様通りに実装を完成させること．

実行結果が正しいことを確認できれば，各自の計算機で JUnit によるテストをパスすることを確認した上で JAR にまとめて提出せよ．
提出するファイルはパッケージ lesson12.exam3 である．テストドライブ（TestDrive_Exam3）は含めてはいけない．
なお，ここで配布している JUnit のテストコードはブラックボックステストをするのみであるので，
このコードをパスできていても正しくコーディングできているとは限らないので注意すること．

=== TestDrive_Exam3.java の実行例 ===

以下の実行例は途中までしか示していない．残りの部分はどうなるべきかは，状態遷移図を参照して考えてみること．

なお，今回変更した状態遷移図では，メソッドを実行しても状態遷移しないことがある．以下の「荷崩れが起きたので自動積み直しを行い配送を続けます」がその部分であるが，状態遷移しない場合は [->次の状態] を表示していないので注意されたい．

<code>
=== 開始 ===
配送を開始しました[->Delivering]
配送を終了しました[->Waiting]
配送を開始しました[->Delivering]
緊急車両を検知したので緊急停止します[->EmergencyStop]
リセットしました[->Waiting]
配送を開始しました[->Delivering]
荷崩れが起きたので自動積み直しを行い配送を続けます
迅速配送の要請が発生したので迅速に配送します[->PrimeDelivering]
</code>
（以下略）
