この問題は実習時間内の正解が必須です．

==== 問題4. State パターンを使った状態遷移の実現（状態や条件の追加） ====

問題2で作成したプログラムの仕様変更を行って，State パターンを利用することで保守が容易かつ明解になることを確認する．

=== 0. 準備 ===

問題4では問題2で作成したクラスに変更を加えて行くので，
パッケージ lesson12.exam2 にあるテストドライブ以外のすべてのクラス・インタフェースを，パッケージ lesson12.exam4 にコピーせよ．

コピーを行う際に，ドラッグ＆ドロップを行うと余計なものを import するようになってしまい，意図しない動作をすることがある．
eclipse のパッケージエクスプローラーで，lesson12.exam2 パッケージにある必要なファイルを選択して「編集」→「コピー」し，
lesson12.exam4 パッケージで「編集」→「貼り付け」を行うこと．

本来は同じ名前で複数の実装のものが混在することは混乱のもとなので避けるべきであるが，
同じクラスに追加実装していったものと，元のものを見比べて欲しいためにこのような構成にしている．

コピーしたあと，DeliveryRobot2 クラスを DeliveryRobot4 クラスに名前変更したあと，次の作業に移ること．

=== 1. 状態と条件の追加 ===

仕様の変更は問題3で行った変更と同じである．

=== 2. ソースコードの変更 ===

問題3と同じく パッケージ lesson12.exam4 のファイルを編集していくこと．
実装するクラスやメソッドなどは配布している Javadoc を参照すること．
Javadoc は仕様通りに実装したソースコードから作成したものであるので，
Javadoc と状態遷移図を参照しながら仕様通りに実装を完成させること．
State パターンによって見通しがよくなっていることに気づいてもらえるものと思う．

この問題では，教科書や問題2で用いたクラス関係とは少し異なるクラス構成を用いる．
各状態クラスに共通するメソッドを持つ State クラス（インタフェースではない）を最初に定義しておき，状態クラスはその子クラスとして定義することにする．
今回の状態遷移では，ある状態について受け付けない操作が多く「（その操作は無効です）」というメッセージを出す場合が多い．
このような場合に教科書にあるような State インタフェースを用いると「（その操作は無効です）」というメッセージを出すメソッドを多く定義しなくてはならない．
これは非常に煩雑で見通しも悪くなってしまうので，Stateクラスにおいてすべてのメソッドに対して「（その操作は無効です）」と表示する振る舞いを定義しておき，
状態クラスでは，これと異なる振る舞いをするメソッドだけをオーバーライドすることにする．

Stateパターンの本質は，コンテクストクラスから状態クラスにある操作に対する振る舞いを委譲することにあると言える．
したがって，状態クラスと State インタフェース（クラス）の関係が異なっても State パターンの本質には影響しない．
デザインパターンを理解する上では，まず，教科書などにあるクラス構成に従って設計・利用していくべきであるが，
その趣旨を理解したあとは，実際の場面に応じて柔軟に適用していく必要がある．本問はその一例となっている．

実行結果が正しいことを確認できれば，各自の計算機で JUnit によるテストをパスすることを確認した上で JAR にまとめて提出せよ．
提出するファイルは lesson12.exam4 パッケージである．テストドライブ（TestDrive_Exam4）は含めてはいけない．
なお，ここで配布している JUnit のテストコードはブラックボックステストをするのみであるので，
このコードをパスできていても正しくコーディングできているとは限らないので注意すること．

=== TestDrive_Exam4.java の実行例 ===

問題3と同様，以下の実行例は途中までしか示していない．残りの部分はどうなるべきかは，状態遷移図を参照して考えてみること．

<code>
=== 配送開始 ===
配送を開始しました[->Delivering]
配送を終了しました[->Waiting]
配送を開始しました[->Delivering]
緊急車両を検知したので緊急停止します[->EmergencyStop]
リセットしました[->Waiting]
配送を開始しました[->Delivering]
荷崩れが起きたので自動積み直しを行い配送を続けます
迅速配送の要請が発生したので迅速に配送します[->PrimeDelivering]
</code>
（以下略）
