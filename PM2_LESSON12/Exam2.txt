この問題は実習時間内の正解が必須です．

==== 問題2. State パターンを使った状態遷移の実現 ====

ここでは，問題1で実装した配送ロボットのふるまいを State パターンを用いて実装する．

問題1では DeliveryRobot1.java クラスに全てを集約していたが，今後の拡張を考えたときに，様々な問題が起こることが予想される．
詳細は教科書を参照してほしいが，たとえば，状態を追加するときにはフィールド変数の追加，各メソッドの変更など，改修箇所が多くなる．
これに対して「状態のふるまいを局所化」することによって見通しをよくするのが State パターンである．

=== 1. 状態遷移モデル ===

本問では問題1とまったく同じ状態遷移モデルを実装する．

=== 2. クラス一覧 ===

本問では lesson12.exam2 パッケージを用いること．
実装するクラスやメソッドなどは配布している zip ファイルの中にある Javadoc を参照すること．doc ディレクトリにある．
配布しているソースファイルは半分程度しか実装できていない状態である．
Javadoc は仕様通りに実装したソードコードから作成したものであるので，
Javadoc と状態遷移図を参照しながら仕様通りに実装を完成させること．

実行結果が正しいことを確認できれば，各自の計算機で JUnit によるテストをパスすることを確認した上で JAR にまとめて提出せよ．
提出するファイルは lesson12.exam2 パッケージである．テストドライブ（TestDrive_Exam2）は含めてはいけない．

また，TestDrive_Exam2.java による動作のうち指定された部分についてシーケンス図を作成せよ．
作成する部分は TestDrive_Exam2.java の中に明記している．
シーケンス図は UMlet を使用して作成し，uxf ファイルをGoogle Classroomの所定の「課題」に提出すること．
%シーケンス図は UMlet を使用して作成し，uxf ファイルを以下のディレクトリに提出すること．
%<code>
%/home/linuxfs/learning/ProJII/uml/12-2/
%</code>
この〆切は次週木曜日の16:30とする．シーケンス図に記載するのは状態遷移に関するメソッドのみとし 
println など表示に関するものは含まなくて良い．

ここで，本問は内部の設計を変更しただけであり，外部的な機能は問題1と同じである．
テストドライブの結果も同じになっていることに注意されたい．
今回はテストドライブを配布しているが，余裕があればこのテストドライブが必要十分であるかを考えてほしい．
すなわち，今回の状態遷移モデルをテストするには，すべてのケース（現在の状態と操作の組み合わせ）をテストしなくてはいけない．
このテストドライブがそのようになっているかを確認してほしい．

=== TestDrive_Exam2.java の実行例 ===

<code>
=== 配送開始 ===
配送を開始しました[->Delivering]
配送を終了しました[->Waiting]
配送を開始しました[->Delivering]
荷崩れが起きたので緊急停止します[->EmergencyStop]
リセットしました[->Waiting]
=== 「待ち」状態からのチェック ===
（その操作は無効です）
（その操作は無効です）
配送を開始しました[->Delivering]
=== 「配送中」状態からのチェック ===
（その操作は無効です）
荷崩れが起きたので緊急停止します[->EmergencyStop]
=== 「緊急停止」状態からのチェック ===
（その操作は無効です）
（その操作は無効です）
リセットしました[->Waiting]
</code>
